"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.adminRouter = void 0;
const express_1 = require("express");
const middlewares_1 = require("../middlewares");
const controllers_1 = require("../controllers");
const validators_1 = require("../validators");
const router = (0, express_1.Router)();
router.post("/register/manager", middlewares_1.commonMiddleware.isBodyValid(validators_1.UserValidator.createManager), middlewares_1.userMiddleware.getDynamicallyAndThrow("email", "body"), controllers_1.authController.registerManager);
router.post("/register/seller", middlewares_1.commonMiddleware.isBodyValid(validators_1.UserValidator.createSeller), middlewares_1.userMiddleware.getDynamicallyAndThrow("email", "body"), controllers_1.authController.registerSeller);
router.post("/login", middlewares_1.commonMiddleware.isBodyValid(validators_1.UserValidator.login), middlewares_1.userMiddleware.getDynamicallyOrThrow("email", "body"), controllers_1.authController.login);
router.post("/refresh", middlewares_1.authMiddleware.checkedRefreshToken, controllers_1.authController.refresh);
router.get("/sellers", middlewares_1.authMiddleware.checkedAccessToken, controllers_1.sellerController.getAll);
router.get("/managers", middlewares_1.authMiddleware.checkedAccessToken, controllers_1.managerController.getAll);
router.get("/cars", middlewares_1.authMiddleware.checkedAccessToken, controllers_1.carController.getAll);
router.post("/cars", middlewares_1.authMiddleware.checkedAccessToken, middlewares_1.commonMiddleware.isBodyValid(validators_1.CarValidator.create), controllers_1.carController.create);
router.get("/sellers/:userId", middlewares_1.authMiddleware.checkedAccessToken, middlewares_1.commonMiddleware.isIdValid("userId"), middlewares_1.userMiddleware.getByIdOrThrow, controllers_1.sellerController.getById);
router.get("/managers/:userId", middlewares_1.authMiddleware.checkedAccessToken, middlewares_1.commonMiddleware.isIdValid("userId"), middlewares_1.userMiddleware.getByIdOrThrow, controllers_1.managerController.getById);
router.get("/cars/:carId", middlewares_1.authMiddleware.checkedAccessToken, middlewares_1.commonMiddleware.isIdValid("carId"), middlewares_1.carMiddleware.getByIdOrThrow, controllers_1.carController.getById);
router.put("/cars/:carId", middlewares_1.authMiddleware.checkedAccessToken, middlewares_1.commonMiddleware.isIdValid("carId"), middlewares_1.commonMiddleware.isBodyValid(validators_1.CarValidator.update), middlewares_1.carMiddleware.getByIdOrThrow, controllers_1.carController.update);
router.delete("/sellers/:userId", middlewares_1.authMiddleware.checkedAccessToken, middlewares_1.commonMiddleware.isIdValid("userId"), middlewares_1.userMiddleware.getByIdOrThrow, controllers_1.sellerController.delete);
router.delete("/managers/:userId", middlewares_1.authMiddleware.checkedAccessToken, middlewares_1.commonMiddleware.isIdValid("userId"), middlewares_1.userMiddleware.getByIdOrThrow, controllers_1.managerController.delete);
router.delete("/cars/:carId", middlewares_1.authMiddleware.checkedAccessToken, middlewares_1.commonMiddleware.isIdValid("carId"), middlewares_1.carMiddleware.getByIdOrThrow, controllers_1.carController.delete);
exports.adminRouter = router;
