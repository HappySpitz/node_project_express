"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sellerRouter = void 0;
const express_1 = require("express");
const controllers_1 = require("../controllers");
const validators_1 = require("../validators");
const middlewares_1 = require("../middlewares");
const enums_1 = require("../enums");
const router = (0, express_1.Router)();
router.post("/register", middlewares_1.commonMiddleware.isBodyValid(validators_1.UserValidator.createSeller), middlewares_1.userMiddleware.getDynamicallyAndThrow("email", "body"), controllers_1.authController.registerSeller);
router.post("/login", middlewares_1.commonMiddleware.isBodyValid(validators_1.UserValidator.login), middlewares_1.userMiddleware.getDynamicallyOrThrow("email", "body"), controllers_1.authController.login);
router.post("/refresh", middlewares_1.authMiddleware.checkedRefreshToken, controllers_1.authController.refresh);
router.post("/change/type/account", middlewares_1.commonMiddleware.isBodyValid(validators_1.UserValidator.emailValidator), middlewares_1.userMiddleware.getDynamicallyOrThrow("email"), controllers_1.authController.sendActivateToken);
router.post("/change/type/account/:token", middlewares_1.authMiddleware.checkActionToken(enums_1.EActionTokenType.changeTypeAccount), controllers_1.authController.changeTypeAccount);
router.get("/cars", controllers_1.carController.getAll);
router.post("/cars", middlewares_1.authMiddleware.checkedAccessToken, middlewares_1.commonMiddleware.isBodyValid(validators_1.CarValidator.create), controllers_1.carController.create);
router.get("/cars/:carId", middlewares_1.authMiddleware.checkedAccessToken, middlewares_1.commonMiddleware.isIdValid("carId"), middlewares_1.carMiddleware.getByIdOrThrow, controllers_1.carController.getById);
router.get("/:userId", middlewares_1.authMiddleware.checkedAccessToken, middlewares_1.commonMiddleware.isIdValid("userId"), middlewares_1.userMiddleware.getByIdOrThrow, controllers_1.sellerController.getById);
router.put("/:userId", middlewares_1.authMiddleware.checkedAccessToken, middlewares_1.commonMiddleware.isIdValid("userId"), middlewares_1.commonMiddleware.isBodyValid(validators_1.UserValidator.update), middlewares_1.userMiddleware.getByIdOrThrow, controllers_1.sellerController.update);
router.put("/cars/:carId", middlewares_1.authMiddleware.checkedAccessToken, middlewares_1.commonMiddleware.isIdValid("carId"), middlewares_1.commonMiddleware.isBodyValid(validators_1.CarValidator.update), middlewares_1.carMiddleware.getByIdOrThrow, controllers_1.carController.update);
router.delete("/:userId", middlewares_1.authMiddleware.checkedAccessToken, middlewares_1.commonMiddleware.isIdValid("userId"), middlewares_1.userMiddleware.getByIdOrThrow, controllers_1.sellerController.delete);
router.delete("/cars/:carId", middlewares_1.authMiddleware.checkedAccessToken, middlewares_1.commonMiddleware.isIdValid("carId"), middlewares_1.carMiddleware.getByIdOrThrow, controllers_1.carController.delete);
router.put("/:userId/avatar", middlewares_1.authMiddleware.checkedAccessToken, middlewares_1.commonMiddleware.isIdValid("userId"), middlewares_1.fileMiddleware.isAvatarValid, middlewares_1.userMiddleware.getByIdOrThrow, controllers_1.sellerController.uploadAvatar);
router.delete("/:userId/avatar", middlewares_1.authMiddleware.checkedAccessToken, middlewares_1.commonMiddleware.isIdValid("userId"), middlewares_1.userMiddleware.getByIdOrThrow, controllers_1.sellerController.deleteAvatar);
router.put("cars/:carId/photo", middlewares_1.authMiddleware.checkedAccessToken, middlewares_1.commonMiddleware.isIdValid("carId"), middlewares_1.fileMiddleware.isPhotosValid, middlewares_1.carMiddleware.getByIdOrThrow, controllers_1.carController.uploadPhoto);
router.delete("/cars/:carId/photo", middlewares_1.authMiddleware.checkedAccessToken, middlewares_1.commonMiddleware.isIdValid("carId"), middlewares_1.carMiddleware.getByIdOrThrow, controllers_1.carController.deletePhoto);
exports.sellerRouter = router;
